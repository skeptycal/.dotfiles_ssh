#!/usr/bin/env bash
#/usr/bin/env false zsh
# -*- coding: utf-8 -*-
# Standard project and usage information to include in scripts

BASH_SOURCE=${BASH_SOURCE:=$0} # to ease the transition to zsh
#? ######################## Project Information
    NAME=${NAME:="${BASH_SOURCE##*/}"}
    VERSION=${VERSION:='1.0.0'}
    DESC=${DESC:='Script Resources for ssm on macOS'}
    USAGE="source ${NAME:-} [help|test|usage|version]"
    AUTHOR="Michael Treanor  <skeptycal@gmail.com>"
    COPYRIGHT="Copyright (c) 2019 Michael Treanor"
    LICENSE="MIT <https://opensource.org/licenses/MIT>"
    GITHUB="https://www.github.com/skeptycal"

source $(which ssm_constants)
# [[ $ZSH_EVAL_CONTEXT =~ :file$ ]] && is_sourced=1 || is_sourced=0

#* ######################## Usage Text Constants
usage_long_desc="$(
    cat <<usage_long_desc
    ${MAIN:-}$NAME${WHITE:-} sets and exports constants and functions for macOS scripts. 
    Includes a few basic ANSI color constants:

    ${MAIN:-}MAIN   ${WARN:-}WARN   ${COOL:-}COOL   ${LIME:-}LIME   ${GO:-}GO   ${CHERRY:-}CHERRY   ${CANARY:-}CANARY   ${ATTN:-}ATTN   ${RAIN:-}RAIN   ${RESET:-}RESET
usage_long_desc
)"
usage_parameters="$(
    cat <<usage_parameters
    help      - display complete usage information (this!)
    test      - perform script tests
    usage     - display short usage instructions
    version   - display version information
usage_parameters
)"

set_man_page() {
    # Create man page $MAN_PAGE from variables and template
    MAN_PAGE="$(
        cat <<MAN_PAGE

${MAIN:-}******************************************************************************
${MAIN:-}NAME${WHITE:-}
    $NAME (version $VERSION) - $DESC

${MAIN:-}SYNOPSIS${WHITE:-}
    $USAGE

${MAIN:-}DESCRIPTION${WHITE:-}
$usage_long_desc

${MAIN:-}OPTIONS${WHITE:-}
$usage_parameters

${MAIN:-}EXIT STATUS${WHITE:-}
    0     - success; no errors detected
    1     - general errors (division by zero, etc.)
    2     - missing keyword or command (possible permission problem)
    64-78 - assorted user errors (e.g. EX_DATAERR=65, EX_NOINPUT=66,
            EX_UNAVAILABL=69, EX_OSERR=71, EX_OSFILE=72, EX_IOERR=74)

${MAIN:-}CONTRIBUTING${WHITE:-}
    GitHub: $GITHUB

${MAIN:-}LICENSE${WHITE:-}
    $LICENSE
    $COPYRIGHT
    $AUTHOR

MAN_PAGE
    )"
}

#* ######################## Basic script functionality
    # Reference - https://stackoverflow.com/questions/2683279/how-to-detect-if-a-script-is-being-sourced
    # is_sourced=0
    # if [ -n "$ZSH_EVAL_CONTEXT" ]; then 
    #     [[ $ZSH_EVAL_CONTEXT =~ :file$ ]] && is_sourced=1 # || is_sourced=0
    #     # case $ZSH_EVAL_CONTEXT in *:file) is_sourced=1;; esac
    # elif [ -n "$KSH_VERSION" ]; then
    #     [ "$(cd $(dirname -- $0) && pwd -P)/$(basename -- $0)" != "$(cd $(dirname -- ${.sh.file}) && pwd -P)/$(basename -- ${.sh.file})" ] && is_sourced=1
    # elif [ -n "$BASH_VERSION" ]; then
    #     (return 0 2>/dev/null) && is_sourced=1 
    # else # All other shells: examine $0 for known shell binary filenames
    #     # Detects `sh` and `dash`; add additional shell filenames as needed.
    #     case ${0##*/} in sh|dash) is_sourced=1;; esac
    # fi

#* ######################## basic tests
_run_tests() {
    # set_man_page
    # printf "%b" "$MAN_PAGE"
    me "Running script $NAME\n"
    attn "process $$ (sourced? ${is_sourced}) ($0, $BASH_SOURCE)" 
    br
    # echo $is_sourced
    # echo "ZSH_EVAL_CONTEXT: $ZSH_EVAL_CONTEXT"
    }
#* ######################## basic parameter handling
parse_options() {
    # parse basic options [help|test|usage|version] & SET_DEBUG
    # TODO the 'exits' and lack of shifts make this function inadequate
    # TODO use standard functions in a wrapper instead
    case "$1" in
    -h | --help | help)
        set_man_page
        printf "$MAN_PAGE"
        br
        br
        return
        # exit 0
        ;;
    -t | --test | test)
        SET_DEBUG=1
        _run_tests
        return
        # exit 0
        ;;
    -u | --usage | usage)
        me "$USAGE"
        return
        # exit 0
        ;;
    -v | --version | version)
        ce "${MAIN}${NAME}${WHITE} (version ${VERSION})${RESET_FG}"
        return
        # exit 0
        ;;
        *) 
        me "$USAGE"
        ;;
    esac
    }

_main_loop() {
    parse_options "$@"
    }

_main_loop "$@"
