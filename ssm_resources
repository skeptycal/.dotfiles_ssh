#!/usr/bin/env zsh
# -*- coding: utf-8 -*-
# Standard project and usage information to include in scripts
BASH_SOURCE=${BASH_SOURCE:=$0} # to ease the transition to zsh
#? ######################## Project Information
    NAME=${NAME:="${BASH_SOURCE##*/}"}
    VERSION=${VERSION:='1.2.0'}
    DESC=${DESC:='Script Resources for ssm on macOS'}
    USAGE="source ${NAME:-} [help|test|usage|version]"

# source $(which ssm_usage)
# SET_DEBUG='1' # set to 1 for debug and verbose testing
# [[ $ZSH_EVAL_CONTEXT =~ :file$ ]] && is_sourced=1 || is_sourced=0

#? ######################## functions

#* ######################## program configuration
# set_man_page, get_linux_platform_name, get_current_os_name

#* ######################## program control flow functions
# async_run, db_echo, die, yes_no, no_yes, exit_usage, print_usage, db_script_source
db_echo() { [[ $SET_DEBUG == 1 ]] && warn "${@:-}${RESET_FG:-}"; }
#* ######################## file manipulation functions
# source_file, hex_dump, url_encode, url_decode
#* ######################## path manipulation functions
# real_name, parse_filename, get_safe_new_filename

#? ######################## old basic_text_colors.sh contents
    # TODO automate creation of TOC
    # FUNCTIONS         PARAMETERS and OPTIONS
    # color constants   - ANSI constants for common colors
    #                       MAIN, WARN, COOL, BLUE, GO, CHERRY, CANARY, ATTN,
    #                       PURPLE, RAIN, WHITE, RESTORE, RESET
    # color functions   - functions for printing lines in common colors
    #                       me (for main), warn, blue, green, cherry, canary,
    #                       attn, purple, rain, white
    # error messages    - C++ style error messages
    # br                - print blank line (CLI \n)
    # ce                - $@ (color echo - generic color as $1, etc.)
    # set_man_page      - set $MAN_PAGE based on docblock variables
    # parse_options     - parse basic options [test|usage|version|help] & SET_DEBUG

#? ######################## References:
    # (Side note about the colors: The colors are preceded by an escape
    #       sequence \e and defined by a color value, composed of [style;color+m]
    #       and wrapped in an escaped [] sequence. eg.
    # reference: https://stackoverflow.com/questions/1550288/os-x-terminal-colors
    # && # Â€Âœexport -p command -- show all the exported variables.
    # reference: https://www.thegeekstuff.com/2010/08/bash-shell-builtin-commands/

#? ######################## Resources found in ssm_resources
    # _debug_function_header, in_list
    #* ######################## C++ style error messages
    # EX_OK, EX_USAGE, EX_DATAERR, EX_NOINPUT, EX_NOUSER, EX_NOHOST, EX_UNAVAILABL, EX_SOFTWARE, EX_OSERR, EX_OSFILE, EX_CANTCREAT, EX_IOERR, EX_TEMPFAIL, EX_PROTOCOL, EX_NOPERM, EX_CONFIG
    #* ######################## BASH trap signals
    # TRAP_SIGHUP, TRAP_SIGINT, TRAP_SIGQUIT, TRAP_SIGILL, TRAP_SIGTRAP, TRAP_SIGABRT, TRAP_SIGEMT, TRAP_SIGFPE, TRAP_SIGKILL, TRAP_SIGBUS, TRAP_SIGSEGV, TRAP_SIGSYS, TRAP_SIGPIPE, TRAP_SIGALRM, TRAP_SIGTERM, TRAP_SIGURG, TRAP_SIGSTOP, TRAP_SIGTSTP, TRAP_SIGCONT, TRAP_SIGCHLD, TRAP_SIGTTIN, TRAP_SIGTTOU, TRAP_SIGIO, TRAP_SIGXCPU, TRAP_SIGXFSZ, TRAP_SIGVTALRM, TRAP_SIGPROF, TRAP_SIGWINCH, TRAP_SIGINFO, TRAP_SIGUSR1, TRAP_SIGUSR2
    #* ######################## ANSI constants for common colors
    # br, ce, me, warn, blue, green, cherry, canary, attn, purple, rain, white
    # MAIN, WARN, COOL, BLUE, GO, CHERRY, CANARY, ATTN, PURPLE, RAIN, WHITE, RESTORE, RESET_FG
    #* ######################## program configuration
    # set_man_page, get_linux_platform_name, get_current_os_name
    #* ######################## program control flow functions
    # async_run, db_echo, die, yes_no, no_yes, exit_usage, print_usage, db_script_source
    #* ######################## file manipulation functions
    # source_file, hex_dump, url_encode, url_decode
    #* ######################## path manipulation functions
    # real_name, parse_filename, get_safe_new_filename

_main_loop() {
    parse_options "$@"

}

_main_loop "$@"
