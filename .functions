#!/usr/bin/env false bash
# -*- coding: utf-8 -*-
# cannot be run directly; called from .bash_profile or .bashrc
# BASH_SOURCE=${(%):-%N} # to ease the transition to zsh
#? ############################# skeptycal.com ################################
NAME="${BASH_SOURCE##*/}"
VERSION='1.2.0'
DESC='personalized Bash functions (Bash 5.0 on macOS)'
USAGE="source ${NAME} [help|test|usage|version]"
AUTHOR="Michael Treanor  <skeptycal@gmail.com>"
COPYRIGHT="Copyright (c) 2019 Michael Treanor"
LICENSE="MIT <https://opensource.org/licenses/MIT>"
GITHUB="https://www.github.com/skeptycal"
#? ############################################################################
# set -a
# export SET_DEBUG=0 # set to 1 for verbose testing
# [[ ! $SSM_LOADED == 1 ]] &&
. "$(which ssm)"
# file for version list 
VERSION_LIST="${SOURCE_PATH}/.VERSION_LIST.md" && export VERSION_LIST

# get name for open if linux or windows
if [ "$(uname -s)" = 'Darwin' ]; then
    UNAME_OS='macOS'
else
    if grep -q Microsoft /proc/version; then
        UNAME_OS='Windows'
        alias open='explorer.exe'
    else
        UNAME_OS='Linux'
        alias open='xdg-open'
    fi
fi
export UNAME_OS

function o() {
    if [ $# -eq 0 ]; then
        open .
    else
        open "$@"
    fi
    }

function write_versions_file() {
    me "# Program Versions List"
    green "## VERSION_LIST path: $VERSION_LIST"
    if [ $UNAME_OS = 'macOS' ]; then 
        warn "**os: $UNAME_OS | $(sw_vers -productName) | $(sw_vers -productVersion)**"
    else 
        warn "**os: $UNAME_OS"
    fi
    
    me "### shell:"
    me "- current shell:        $SHELL"
    canary "- $(bash --version | grep bash | cut -d ',' -f 1)              v$(bash --version | grep bash | cut -d ' ' -f 4 | cut -d '(' -f 1)"
    green "- zsh version:          $(zsh --version | cut -d ' ' -f 2)"
    [ $(which code) ] && blue "- VSCode:         $(code --version | head -n 1)" || blue '- no VSCode installed'
    br
    me "### utilities:"
    [ $(which clang) ] && warn "- $(clang --version | grep version | sed 's/version /    v/g')" || warn '- no clang installed'
    [ $(which git) ] && attn "- $(git --version | sed 's/version /            v/g')" || attn '- no GIT installed'
    [ $(which hub) ] && attn "- $(hub --version | grep hub | sed 's/version /            v/g')" || attn '- no HUB installed'
    green "- grep            v$(grep --version | head -n 1)"
    [ $(which prettier) ] && canary "- prettier        v$(prettier --version)" || canary '- no prettier installed'
    br
    me '### package managers'
    [ $(which brew) ] && canary "- homebrew        v$(brew --version | tail -n 3 | head -n 1 | cut -d ' ' -f 2)" || canary '- no brew installed'
    [ $(which conda) ] && blue "- conda           v$(conda -V | cut -d ' ' -f 2) " || blue '- no conda installed'
    [ $(which pip) ] && blue "- pip             v$(pip --version | cut -d ' ' -f 2) " || blue '- no pip installed'
    [ $(which pipenv) ] && blue "- pipenv          v$(pipenv --version | cut -d ' ' -f 3) " || blue '- no pipenv installed'
    [ $(which cargo) ] && attn "- cargo           v$(cargo --version | cut -d ' ' -f 2)" || attn '- no cargo installed'
    [ $(which rustup) ] && attn "- rustup          v$(rustup --version | cut -d ' ' -f 2)" || attn '- no rustup installed'
    [ $(which npm) ] && canary "- npm             v$(npm -v)" || canary '- no npm installed'
    [ $(which composer) ] && purple "- composer        v$(composer --version | cut -d ' ' -f 3)" || purple '- no composer installed'
    [ $(which tlmgr) ] && green "- TeXLive(tlmgr)  $(tlmgr --version | head -n 1 | cut -d ' ' -f 3-4))" || green '- no tlmgr installed'
    br
    # attn "  $(lein --version | sed 's/Leiningen/lein version/g' | sed 's/version /       v/g')"
    me "### languages:"
    [ $(which GO) ] && blue "- GO              v$(go version | cut -d ' ' -f 3 | sed 's/go//g')" || blue '- no GO installed'
    [ $(which rustc) ] && attn "- rustc           v$(rustc --version | cut -d ' ' -f 2)" || attn '- no rustc installed'
    [ $(which ruby) ] && warn "- ruby            v$(ruby -v 2>/dev/null | cut -d ' ' -f 2 | cut -d 'p' -f 1)" || warn '- no ruby installed'
    [ $(which php) ] && purple "- php             v$(php -v 2>/dev/null | grep '(cli)' | cut -d ' ' -f 2)" || purple '- no php installed'
    [ $(which python) ] && blue "- python          v$(python --version | cut -d ' ' -f 2)${RESET_FG}\n" || blue '- no python installed'
    [ $(which node) ] && canary "- node            $(node -v)" || canary '- no node installed'
    [ $(which Xcode) ] && cherry "- Xcode           v$(/Applications/Xcode.app/Contents/Developer/usr/bin/xcodebuild -version | grep Xcode | sed 's/Xcode //g')" || cherry '- no Xcode installed'
    [ $(which Clojure) ] && attn "- Clojure $(clojure -Sdescribe | grep version | sed 's/{://g' | sed 's/"//g' | sed 's/version /        v/g')" || attn '- no Clojure installed'
    br
    } 
function save_versions() {
    if [ -d "${SOURCE_PATH}" ]; then
        rm -rf "$VERSION_LIST" >/dev/null
        # : >"$VERSION_LIST" # 'touch' $VERSION_LIST file
        write_versions_file >"$VERSION_LIST"
    fi
    }

function versions() {
    save_versions
    cat "$VERSION_LIST"
    }
function lns() {
    # list symlinks in current directory
    # References: https://askubuntu.com/questions/522051/how-to-list-all-symbolic-links-in-a-directory
    # la | grep '\-> \/'
    find $PWD -maxdepth 1 -type l
    }

function new() { echo -e ${1//:/\\n}; }
function pyver() {
    # silly function to address the lack of correct output from
    #   python 2.7 executable in this sitation 'python --version'
    python -c "print('.'.join(str(i).strip() for i in __import__('sys').version_info[:3]))"
    }

function readlinkf() { perl -MCwd -e 'print Cwd::abs_path shift' "$1"; }
function pk() { pkill -9 -u "$(id -u $1)"; } # kill another user's processes
function check_file() {
    local name="${1##*/}"
    local path="${1%/*}"
    echo "name: $name"
    echo "path: $path"
    local tmp_chk=''
    [[ -e "$path" ]] && tmp_chk="${tmp_chk} exists" || tmp_chk="${tmp_chk} does-not-exist"
    [[ -f "$path" ]] && tmp_chk="${tmp_chk} regular"
    [[ -L "$path" ]] && tmp_chk="${tmp_chk} link"
    [[ -d "$path" ]] && tmp_chk="${tmp_chk} directory"
    [[ -r "$path" ]] && tmp_chk="${tmp_chk} readable"
    [[ -s "$path" ]] && tmp_chk="${tmp_chk} size>0"
    [[ -w "$path" ]] && tmp_chk="${tmp_chk} writable"
    [[ -x "$path" ]] && tmp_chk="${tmp_chk} executable"
    [[ -O "$path" ]] && tmp_chk="${tmp_chk} owned-by-me"
    [[ -N "$path" ]] && tmp_chk="${tmp_chk} dirty"
    [[ -k "$path" ]] && tmp_chk="${tmp_chk} sticky"
    echo " ->$tmp_chk"
    echo ''
    }
function prettier_here() {
    # $1 = path (default $PWD); $2 = filenames ( default '*')
    # OR
    # $1 = 'git'; $2 = "$files"
    if [[ "$1" == 'git' ]]; then
        FILES=$(git diff --cached --name-only | sed 's| |\\ |g')
        echo ${2:-$FILES} | xargs prettier --write | grep -e '[[:space:]]\?[[:digit:]]\+ms'
    else
        find -L ${1:-$PWD} -name ${2:-'*'} -type f -print0 | xargs -0 prettier --write | grep -e '[[:space:]]\?[[:digit:]]\+ms'
    fi
    }
function pretty() {
    # Use prettier to format all compatible selected files
    # Use $1 for pattern, -m (github diff) or default is '*'

    if [[ -z "$1" ]]; then
        echo "Making all the things pretty! (use pretty -h for help)"
        yes_no 'Make all of the things Prettier? (Y/n) '
        if [ "$?" ]; then
            ce "$_pretty_usage"
        else
            prettier_here
        fi
    else
        case "$1" in
        '-h' | '--help' | 'help')
            ce "$_pretty_usage"
            return $EX_USAGE
            ;;
        '-m' | '--commit-message' | 'commit')
            # echo "Making your git staged file pretty ..."
            # select stated files
            FILES=$(git diff --cached --name-only | sed 's| |\\ |g')
            # Prettify all selected files
            prettier_here
            # Add back the modified/prettified files to staging
            echo "$FILES" | xargs git add
            git commit -m "prettybot: $2"
            git status
            ;;
        *)
            prettier_here $PWD $1
            ;;
        esac
    fi
    }
function clip() { $("$@") | pbcopy; }
function chmod_all() {
    # chmod matching files to given mode
    # $1 is path (default $PWD);
    # $2 is pattern (default '*');
    # $3 is mode (default '644' for files, '755' for directories)
    case "$1" in
    '-h' | '--help' | 'help')
        echo "Usage : $0 [path($PWD)] [pattern(*)] [mode(644)]"
        return $EX_USAGE
        ;;
    esac

    # Check the given file is exist #
    if [ ! -f "$2" ]; then
        echo "Filename given \"$2\" doesn't exist"
        return 1
    fi

    find -L ${1:-$PWD} -name ${2:-'*'} -type f -print0 | xargs -0 chmod ${3:-644}
    }
function web_chmod() {
    # Set default permissions for a folder that will be uploaded to the web.
    # default directory is PWD
    # most files = 644; directories = 755
    [[ -d "$1" ]] && dir="$1" || dir=$PWD
    find -LX "$dir" -type f -print0 | xargs -0 chmod 644
    echo "Changing permissions of all regular files to 0644."
    find -LX "$dir" -type d -print0 | xargs -0 chmod 755
    echo "Changing permissions of all regular directories to 0755."
    # ls "$dir" -ARlh
    }
function find_broken() {
    # Find and delete all broken symbolic links in current directiry
    # use safety feature $1 == '-d' to actually delete them
    # interesting method:
    # https://stackoverflow.com/a/26887762/9878098
    if [[ "$1" == "-d" ]]; then
        echo "Deleting Broken Symlinks ..."
        find -L $PWD -type l -exec rm -- {} +
    else
        echo "Listing Broken Symlinks (use -d to delete links)..."

        find -L $PWD -type l -print 2>&1
    fi
    }
function trw() {
    # TODO work in progress
    return 0
    #     # trim leading and trailing whitespace
    #     local var="$*"
    #     var="${var#"${var%%[![:space:]]*}"}"

    #     var="${var#"${var&&[!'/']*}"}"
    #     var="${var%"${var##*[![:space:]]}"}"
    #     echo -n "$var"
    }
function git_one() {
    # TODO work in progress
    # to keep from delaying a commit due to one file that won't pass pre-commit
    FILES=$(gaa -n)
    FILES=${FILES[@]/5/-1}
    for file in $FILES; do
        fixed_file=${file/5/-1}
        echo "$fixed_file"
    done
    }
function bak() {
    FILES="$@"
    [[ -d "$PWD/bak" ]] || mkdir "$PWD/bak"
    for file in $FILES; do
        [[ -d "$file" ]] && bak "$file"
        printf "Backup file %s " $file
        [[ -f "$file" ]] && cp -f "$file" "bak/${file}.bak" || echo -e "${WARN}backup unsuccessful - ${MAIN}${file}${RESET_FG}"
        echo ''
    done
    }
function nonzero_return() {
    RETVAL=$?
    [ $RETVAL -ne 0 ] && echo "$RETVAL"
    }
function parse_git_branch() {
    BRANCH=$(git branch 2>/dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
    if [ ! "${BRANCH}" == "" ]; then
        STAT=$(parse_git_dirty)
        echo "[${BRANCH}${STAT}]"
    else
        echo ""
    fi
    }
function parse_git_dirty() {
    status=$(git status 2>&1 | tee)
    dirty=$(
        echo -n "${status}" 2>/dev/null | grep "modified:" &>/dev/null
        echo "$?"
    )
    untracked=$(
        echo -n "${status}" 2>/dev/null | grep "Untracked files" &>/dev/null
        echo "$?"
    )
    ahead=$(
        echo -n "${status}" 2>/dev/null | grep "Your branch is ahead of" &>/dev/null
        echo "$?"
    )
    newfile=$(
        echo -n "${status}" 2>/dev/null | grep "new file:" &>/dev/null
        echo "$?"
    )
    renamed=$(
        echo -n "${status}" 2>/dev/null | grep "renamed:" &>/dev/null
        echo "$?"
    )
    deleted=$(
        echo -n "${status}" 2>/dev/null | grep "deleted:" &>/dev/null
        echo "$?"
    )
    bits=''
    if [ "${renamed}" == "0" ]; then
        bits=">${bits}"
    fi
    if [ "${ahead}" == "0" ]; then
        bits="*${bits}"
    fi
    if [ "${newfile}" == "0" ]; then
        bits="+${bits}"
    fi
    if [ "${untracked}" == "0" ]; then
        bits="?${bits}"
    fi
    if [ "${deleted}" == "0" ]; then
        bits="x${bits}"
    fi
    if [ "${dirty}" == "0" ]; then
        bits="!${bits}"
    fi
    if [ ! "${bits}" == "" ]; then
        echo " ${bits}"
    else
        echo ""
    fi
    }
function a() { alias | grep "$1"; }
function lt() { ls -lhtrsA "$@" | tail; }
function azure_agent() {
    # svc.sh only seems to work when run from its own directory ...
    # added default parameter 'status'
    local temp_pwd="$PWD"
    cd "$AZURE_WORKING_DIR" || return
    ${AZURE_WORKING_DIR}/svc.sh ${1:-'status'}
    result="$?"
    cd "$temp_pwd"
    unset temp_pwd
    return $result
    }
function datelog() {
    # create a logfile with the date as part of the file_name
    [[ -z $1 ]] && exit 1
    command_text="$@"
    file_name="${PWD}/datelog_$(date "+%m_%d_%y").log"
    printf "\nOutput logged to file: %s\n${file_name}\n"
    printf "\n===================================\n" | tee -a "$file_name"
    printf "Log for %s\n\n" $(date "+%m/%d/%Y") | tee -a "$file_name"
    exec "$command_text" | tee -a "$file_name"
    $("$@") | tee -a "$file_name"
    }

function mkd() { mkdir -p "$@" && cd "$_" || return }
function targz() {
    local tmpFile="${*%/}.tar"
    tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1

    size=$(
        stat -f"%z" "${tmpFile}" 2>/dev/null
        stat -c"%s" "${tmpFile}" 2>/dev/null
    )

    local cmd=""
    if ((size < 52428800)) && hash zopfli 2>/dev/null; then
        cmd="zopfli"
    else
        if hash pigz 2>/dev/null; then
            cmd="pigz"
        else
            cmd="gzip"
        fi
    fi

    echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…"
    "${cmd}" -v "${tmpFile}" || return 1
    [ -f "${tmpFile}" ] && rm "${tmpFile}"

    zippedSize=$(
        stat -f"%z" "${tmpFile}.gz" 2>/dev/null
        stat -c"%s" "${tmpFile}.gz" 2>/dev/null
    )

    echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully."
    }

function fs() {
    if du -b /dev/null >/dev/null 2>&1; then
        local arg=-sbh
    else
        local arg=-sh
    fi
    if [[ -n "$*" ]]; then
        du $arg -- "$*"
    else
        du $arg .[^.]* ./*
    fi
    }

function dataurl() {
    local mimeType
    mimeType=$(file -b --mime-type "$1")
    if [[ $mimeType == text/* ]]; then
        mimeType="${mimeType};charset=utf-8"
    fi
    echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
    }

function server() {
    local port="${1:-8000}"
    sleep 1 && open "http://localhost:${port}/" &
    python2 -c 'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
    }

function phpserver() {
    local port
    port="${1:-4000}"
    local ip
    ip=$(ipconfig getifaddr en0)
    sleep 1 && open "http://${ip}:${port}/" &
    php -S -c "$PWD" "${ip}:${port}" -
    }

function gz() {
    local origsize
    origsize=$(wc -c <"$1")
    local gzipsize
    gzipsize=$(gzip -c "$1" | wc -c)
    local ratio
    ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l)
    printf "orig: %d bytes\n" "$origsize"
    printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio"
    }

function getcertnames() {
    if [ -z "${1}" ]; then
        echo "ERROR: No domain specified."
        return 1
    fi

    local domain="${1}"
    echo "Testing ${domain}…"
    echo ""

    local tmp
    local certText
    tmp=$(echo -e "GET / HTTP/1.0\nEOT" |
        openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1)
    if [[ "${tmp}" == *"-----BEGIN CERTIFICATE-----"* ]]; then
        certText=$(echo "${tmp}" |
            openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
                no_serial, no_sigdump, no_signame, no_validity, no_version")
        echo "Common Name:"
        echo ""
        echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//"
        echo ""
        echo "Subject Alternative Name(s):"
        echo ""
        echo "${certText}" | grep -A 1 "Subject Alternative Name:" |
            sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2
        return 0
    else
        echo "ERROR: Certificate not found."
        return 1
    fi
    }

function tre() { tree -axC -I '.git|node_modules|bower_components' --dirsfirst "$@" -- | less -FRNX }
tt() { tree -L 1 -- "$@" }
function tree_html() { tree -ahlsAFRHD --prune --du --si --dirsfirst >tree.html }
function _run_debug_functions() {
    db_script_source "Functions test"
    warn $NAME
    }

function _main_functions() {
    # use git diff if available
    if [[ "$(hash git &>/dev/null)" -eq 0 ]]; then
        function diff() {
            git diff --no-index --color-words "$@"
        }
    fi
    br
    green "Use <versions> to display shell, language, and utility versions. (Use <checkpath> to check system \$PATH.)"
    br
    # versions #! show versions when loading shell
    # echo "Travis test: $TRAVIS_TOKEN"
    # travis login --github-token "$TRAVIS_TOKEN"

    [[ $SET_DEBUG == '1' ]] && _run_debug_functions
    }

_main_functions "$@"

# References:
# 	'find types' https://www.gnu.org/software/findutils/manual/html_mono/find.html#Type
# pipe $2 with $1 using |&  https://unix.stackexchange.com/questions/128975/why-doesnt-grep-using-pipe-work-here
